/* This file is part of Mino.
 *
 * See the NOTICE file distributed with this work for copyright information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Package mino.syntax;

Tokens

  class_kwd = ;
  var_kwd = ;
  fun_kwd = ;
  primitive_kwd = ;
  if_kwd = ;
  while_kwd = ;
  true_kwd = ;
  false_kwd = ;
  special_kwd = ;
  else_kwd = ;
  is_kwd = ;
  return_kwd = ;
  self_kwd = ;
  null_kwd = ;
  new_kwd = ;

  class_name = ;
  field_name = ;
  id = ;

  number = ;

  string = ;

  plus = ;
  eq = ;
  not = ;
  assign = ;
  dot = ;

  l_br = ;
  r_br = ;
  l_par = ;
  r_par = ;
  sc = ;
  comma = ;

Productions

  file =
    [classdefs]:classdef* [stms]:stm*;

  classdef =
    class_kwd class_name special? l_br [members]:member* r_br;

  special =
    special_kwd class_name;

  member =
    {field} var_kwd field_name sc |
    {method} fun_kwd id l_par id_list? r_par l_br [stms]:stm* r_br |
    {operator} fun_kwd operator l_par id_list? r_par l_br [stms]:stm* r_br |
    {primitive_method} primitive_kwd id l_par id_list? r_par sc |
    {primitive_operator} primitive_kwd operator l_par id_list? r_par sc;

  id_list =
    id [additional_ids]:additional_id*;

  additional_id =
    comma id;

  operator =
    {plus} plus |
    {eq} eq;

  stm =
    {var_assign} id assign exp sc |
    {field_assign} field_name assign exp sc |
    {call} call sc |
    {self_call} self_call sc |
    {while} while_kwd l_par exp r_par l_br [stms]:stm* r_br |
    {if} if_kwd l_par exp r_par l_br [stms]:stm* r_br else? |
    {return} return_kwd exp? sc;

  else =
    else_kwd l_br [stms]:stm* r_br;

  exp =
    {is} exp is_kwd add_exp |
    {eq} exp eq add_exp |
    {simple} add_exp;

  add_exp =
    {add} add_exp plus left_exp |
    {simple} left_exp;

  left_exp =
    {not} not left_exp |
    {simple} right_exp;

  right_exp =
    {call} call |
    {simple} term;

  term =
    {self_call} self_call |
    {par} l_par exp r_par |
    {new} new_kwd class_name |
    {field} field_name |
    {var} id |
    {num} number |
    {null} null_kwd |
    {self} self_kwd |
    {true} true_kwd |
    {false} false_kwd |
    {string} string;

  call =
    right_exp dot id l_par exp_list? r_par;

  self_call =
    id l_par exp_list? r_par;

  exp_list =
    exp [additional_exps]:additional_exp*;

  additional_exp =
    comma exp;
